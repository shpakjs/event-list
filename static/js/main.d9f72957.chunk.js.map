{"version":3,"sources":["components/Photos/Photos.jsx","components/EventControls/EventControls.jsx","components/EventCard/EventCard.jsx","components/Filters/Filters.jsx","components/EventsList/EventsList.jsx","App.js","serviceWorker.js","index.js"],"names":["EventInfo","props","className","photos","map","src","key","Date","alt","EventControls","useState","count","setCount","onClick","disabled","price","EventCard","popular","name","description","dates","join","category","images","Filters","popularity","setPopularity","setCategory","useEffect","changeFilters","type","id","checked","onChange","e","target","htmlFor","value","EventsList","Object","values","events","setEvents","filteredArr","filter","event","includes","appData","require","App","activities","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9f72957.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport { Carousel } from 'react-responsive-carousel';\r\n\r\nimport './Photos.scss';\r\n\r\nfunction EventInfo(props) {\r\n    return (\r\n        <div className=\"photo\" >\r\n            <Carousel>\r\n                { props.photos.map(src => <div key={new Date()}><img src={src}/></div>)}\r\n            </Carousel>\r\n            <img src={props.photos[0]} alt=\"activity\"/>\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default EventInfo;\r\n","import React, { useState } from 'react';\r\nimport './EventControls.scss';\r\n\r\nfunction EventControls(props) {\r\n  let [count, setCount] = useState(0);\r\n  return (\r\n    <div className=\"controls\">\r\n        <h4>TICKETS</h4>\r\n        <div className=\"count\">\r\n          <button onClick={() => setCount(count-1)} disabled={count === 0}> - </button>\r\n          {count}\r\n          <button onClick={() => setCount(count+1)} > + </button>\r\n        </div>\r\n        <div>TOTAL: { count * props.price} $</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EventControls;\r\n","import React from 'react';\r\nimport Photos from '../Photos/Photos';\r\nimport './EventCard.scss';\r\nimport EventControls from '../EventControls/EventControls';\r\n\r\nfunction EventCard(props) {\r\n\r\n    return (\r\n        <div className=\"event\">\r\n            <EventControls price={props.price}/>\r\n            <div className=\"info\">\r\n                { props.popular && <div className=\"popular\">popular</div> }\r\n                <h4>{ props.name }</h4>\r\n                <div>\r\n                    <i className=\"material-icons md-18\">monetization_on</i>\r\n                    { props.price }\r\n                </div>\r\n                <p className=\"description\">{ props.description }</p>\r\n                <div className=\"small_text additional\">\r\n                    <i className=\"material-icons md-18\">event</i>\r\n                    { props.dates.join('-') }\r\n                </div>\r\n                <div className=\"small_text additional\">{ props.category.join(',') } </div>\r\n            </div>\r\n            <Photos photos={props.images}/>\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default EventCard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Filters.scss';\r\n\r\nfunction Filters(props) {\r\n    const [popularity, setPopularity] = useState(false);\r\n    const [category, setCategory] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        props.changeFilters({popularity, category});\r\n    }, [popularity, category]);\r\n\r\n    return (\r\n        <div className=\"filters\">\r\n            <div className=\"filter\">\r\n                <input type=\"checkbox\" id=\"popular\" checked={popularity} onChange={(e) => setPopularity(e.target.checked)} />\r\n                <label htmlFor=\"popular\" >show popular</label>\r\n            </div>\r\n            <select className=\"filter\" value={category} onChange={(e)=> setCategory(e.target.value)} >\r\n                <option value=\"\"></option>\r\n                <option value=\"family\">family</option>\r\n                <option value=\"music\">music</option>\r\n                <option value=\"concert\">concert</option>\r\n                <option value=\"Sport\">sport</option>\r\n                <option value=\"Football\">football</option>\r\n                <option value=\"Tour\">tour</option>\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Filters;\r\n","import React, { useState } from 'react';\r\nimport Event from '../EventCard/EventCard';\r\nimport Filters from '../Filters/Filters';\r\n\r\nimport './EventsList.scss';\r\n\r\nfunction EventsList(props) {\r\n    const [events, setEvents] = useState(Object.values(props.events));\r\n\r\n    const changeFilters = ({category, popularity}) => {\r\n        let filteredArr = Object.values(props.events)\r\n            .filter( event => {\r\n                if(category){\r\n                    return popularity \r\n                        ? event.popular && event.category.includes(category)\r\n                        : event.category.includes(category);\r\n                }\r\n                return popularity ? event.popular : event;\r\n                    \r\n            });\r\n        setEvents(filteredArr);\r\n    }\r\n    return (\r\n        <div className=\"events_list\">\r\n            <Filters changeFilters={changeFilters}/>\r\n            {\r\n                events.map( event => {\r\n                    return <Event key={event.id} {...event} />\r\n                })\r\n            }\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EventsList;\r\n","import React from 'react';\r\nimport EventsList from './components/EventsList/EventsList';\r\nimport './App.scss';\r\n\r\nconst appData = require('./dataset.json');\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <EventsList events={ appData.activities }/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}